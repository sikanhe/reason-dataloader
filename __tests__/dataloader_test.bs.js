// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Future = require("reason-future/src/Future.bs.js");
var FutureJs = require("reason-future/src/FutureJs.bs.js");
var Dataloader = require("../src/dataloader.bs.js");

function all(param) {
  if (param) {
    var rest = param[1];
    return Future.flatMap(param[0], (function (value) {
                  return Future.map(all(rest), (function (acc) {
                                return /* :: */[
                                        value,
                                        acc
                                      ];
                              }));
                }));
  } else {
    return Future.value(/* [] */0);
  }
}

var Future$1 = /* module */[
  /* make */Future.make,
  /* value */Future.value,
  /* map */Future.map,
  /* flatMap */Future.flatMap,
  /* map2 */Future.map2,
  /* map3 */Future.map3,
  /* map4 */Future.map4,
  /* map5 */Future.map5,
  /* tap */Future.tap,
  /* get */Future.get,
  /* mapOk */Future.mapOk,
  /* mapError */Future.mapError,
  /* flatMapOk */Future.flatMapOk,
  /* flatMapError */Future.flatMapError,
  /* mapOk2 */Future.mapOk2,
  /* mapOk3 */Future.mapOk3,
  /* mapOk4 */Future.mapOk4,
  /* mapOk5 */Future.mapOk5,
  /* tapOk */Future.tapOk,
  /* tapError */Future.tapError,
  /* >>= */Future.$great$great$eq,
  /* <$> */Future.$less$$great,
  /* all */all
];

function make(param) {
  var batchCalls = /* record */[/* contents : [] */0];
  var loader = Dataloader.make(undefined, (function (keys) {
          batchCalls[0] = List.append(batchCalls[0], /* :: */[
                keys,
                /* [] */0
              ]);
          return Future.value(keys);
        }));
  return /* tuple */[
          loader,
          batchCalls
        ];
}

var IdentityLoader = /* module */[/* make */make];

Jest.describe("Primary API", (function (param) {
        Jest.testAsync("works for one key", undefined, (function (assertion) {
                var identityLoader = Dataloader.make(undefined, Future.value);
                return Future.get(Curry._1(identityLoader[/* load */0], 1), (function (one) {
                              return Curry._1(assertion, Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](one), 1));
                            }));
              }));
        Jest.testAsync("works for many keys in one call", undefined, (function (assertion) {
                var identityLoader = Dataloader.make(undefined, Future.value);
                return Future.get(Curry._1(identityLoader[/* load */0], /* :: */[
                                1,
                                /* :: */[
                                  2,
                                  /* :: */[
                                    3,
                                    /* [] */0
                                  ]
                                ]
                              ]), (function (nums) {
                              return Curry._1(assertion, Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](nums), /* :: */[
                                              1,
                                              /* :: */[
                                                2,
                                                /* :: */[
                                                  3,
                                                  /* [] */0
                                                ]
                                              ]
                                            ]));
                            }));
              }));
        Jest.test("coalesces identical requests", (function (param) {
                var identityLoader = Dataloader.make(undefined, Future.value);
                var future1 = Curry._1(identityLoader[/* load */0], 1);
                var future2 = Curry._1(identityLoader[/* load */0], 1);
                return Curry._2(Jest.Expect[/* Operators */25][/* == */0], Jest.Expect[/* expect */0](future1), future2);
              }));
        Jest.testAsync("batches multiple requests", undefined, (function (assertion) {
                var match = make(/* () */0);
                var batchCalls = match[1];
                var identityLoader = match[0];
                var future1 = Curry._1(identityLoader[/* load */0], 1);
                var future2 = Curry._1(identityLoader[/* load */0], 2);
                return Future.get(all(/* :: */[
                                future1,
                                /* :: */[
                                  future2,
                                  /* [] */0
                                ]
                              ]), (function (_results) {
                              return Curry._1(assertion, Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](batchCalls[0]), /* :: */[
                                              /* :: */[
                                                1,
                                                /* :: */[
                                                  2,
                                                  /* [] */0
                                                ]
                                              ],
                                              /* [] */0
                                            ]));
                            }));
              }));
        return Jest.testAsync("caches repeated requests", undefined, (function (assertion) {
                      var match = make(/* () */0);
                      var batchCalls = match[1];
                      var identityLoader = match[0];
                      var futureA = Curry._1(identityLoader[/* load */0], "A");
                      var futureB = Curry._1(identityLoader[/* load */0], "B");
                      return Future.get(all(/* :: */[
                                      futureA,
                                      /* :: */[
                                        futureB,
                                        /* [] */0
                                      ]
                                    ]), (function (param) {
                                    var futureA2 = Curry._1(identityLoader[/* load */0], "A");
                                    var futureC = Curry._1(identityLoader[/* load */0], "C");
                                    return Future.get(all(/* :: */[
                                                    futureA2,
                                                    /* :: */[
                                                      futureC,
                                                      /* [] */0
                                                    ]
                                                  ]), (function (param) {
                                                  var futureA3 = Curry._1(identityLoader[/* load */0], "A");
                                                  var futureB2 = Curry._1(identityLoader[/* load */0], "B");
                                                  var futureC2 = Curry._1(identityLoader[/* load */0], "C");
                                                  return Future.get(all(/* :: */[
                                                                  futureA3,
                                                                  /* :: */[
                                                                    futureC2,
                                                                    /* :: */[
                                                                      futureB2,
                                                                      /* [] */0
                                                                    ]
                                                                  ]
                                                                ]), (function (param) {
                                                                return Curry._1(assertion, Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](batchCalls[0]), /* :: */[
                                                                                /* :: */[
                                                                                  "A",
                                                                                  /* :: */[
                                                                                    "B",
                                                                                    /* [] */0
                                                                                  ]
                                                                                ],
                                                                                /* :: */[
                                                                                  /* :: */[
                                                                                    "C",
                                                                                    /* [] */0
                                                                                  ],
                                                                                  /* [] */0
                                                                                ]
                                                                              ]));
                                                              }));
                                                }));
                                  }));
                    }));
      }));

Jest.describe("It is resilient to job queue ordering", (function (param) {
        Jest.testAsync("batch loads occur during promises", undefined, (function (assertion) {
                var match = make(/* () */0);
                var batchCalls = match[1];
                var identityLoader = match[0];
                Promise.all(/* array */[
                        FutureJs.toPromise(Curry._1(identityLoader[/* load */0], "A")),
                        Promise.resolve(/* () */0).then((function (param) {
                                  return Promise.resolve(/* () */0);
                                })).then((function (param) {
                                Curry._1(identityLoader[/* load */0], "B");
                                return Promise.resolve(/* () */0).then((function (param) {
                                                return Promise.resolve(/* () */0);
                                              })).then((function (param) {
                                              Curry._1(identityLoader[/* load */0], "C");
                                              return Promise.resolve(/* () */0).then((function (param) {
                                                              return Promise.resolve(/* () */0);
                                                            })).then((function (param) {
                                                            return FutureJs.toPromise(Curry._1(identityLoader[/* load */0], "D"));
                                                          }));
                                            }));
                              }))
                      ]).then((function (param) {
                        Curry._1(assertion, Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](batchCalls[0]), /* :: */[
                                  /* :: */[
                                    "A",
                                    /* :: */[
                                      "B",
                                      /* :: */[
                                        "C",
                                        /* :: */[
                                          "D",
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ],
                                  /* [] */0
                                ]));
                        return Promise.resolve(/* () */0);
                      }));
                return /* () */0;
              }));
        return Jest.testAsync("batch loads occur during futures", undefined, (function (assertion) {
                      var match = make(/* () */0);
                      var batchCalls = match[1];
                      var identityLoader = match[0];
                      Future.flatMap(all(/* :: */[
                                Curry._1(identityLoader[/* load */0], "A"),
                                /* :: */[
                                  Future.flatMap(Future.flatMap(Future.value(/* () */0), (function (param) {
                                              return Future.value(/* () */0);
                                            })), (function (param) {
                                          Curry._1(identityLoader[/* load */0], "B");
                                          return Future.flatMap(Future.flatMap(Future.value(/* () */0), (function (param) {
                                                            return Future.value(/* () */0);
                                                          })), (function (param) {
                                                        Curry._1(identityLoader[/* load */0], "C");
                                                        return Future.flatMap(Future.flatMap(Future.value(/* () */0), (function (param) {
                                                                          return Future.value(/* () */0);
                                                                        })), (function (param) {
                                                                      return Curry._1(identityLoader[/* load */0], "D");
                                                                    }));
                                                      }));
                                        })),
                                  /* [] */0
                                ]
                              ]), (function (param) {
                              Curry._1(assertion, Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](batchCalls[0]), /* :: */[
                                        /* :: */[
                                          "A",
                                          /* :: */[
                                            "B",
                                            /* :: */[
                                              "C",
                                              /* :: */[
                                                "D",
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ],
                                        /* [] */0
                                      ]));
                              return Future.value(/* () */0);
                            }));
                      return /* () */0;
                    }));
      }));

exports.Future = Future$1;
exports.IdentityLoader = IdentityLoader;
/*  Not a pure module */

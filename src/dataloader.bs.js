// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Future = require("reason-future/src/Future.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Belt_MutableQueue = require("bs-platform/lib/js/belt_MutableQueue.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function all(param) {
  if (param) {
    var rest = param[1];
    return Future.flatMap(param[0], (function (value) {
                  return Future.map(all(rest), (function (acc) {
                                return /* :: */[
                                        value,
                                        acc
                                      ];
                              }));
                }));
  } else {
    return Future.value(/* [] */0);
  }
}

function make($staropt$star, batchFn) {
  var cacheSize = $staropt$star !== undefined ? $staropt$star : 256;
  var queue = Belt_MutableQueue.make(/* () */0);
  var cache = Hashtbl.create(undefined, cacheSize);
  var resolvedPromise = Promise.resolve(/* () */0);
  var run = function (param) {
    var match = Belt_MutableQueue.peek(queue);
    if (match !== undefined) {
      var tasks = Belt_MutableQueue.toArray(queue);
      Belt_MutableQueue.clear(queue);
      var keys = $$Array.map((function (task) {
              return task[/* key */0];
            }), tasks);
      var __x = Curry._1(batchFn, $$Array.to_list(keys));
      return Future.get(__x, (function (values) {
                    try {
                      return List.iter((function (param) {
                                    return Curry._1(param[0][/* resolve */1], param[1]);
                                  }), List.combine($$Array.to_list(tasks), values));
                    }
                    catch (raw_exn){
                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                      if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
                        return Js_exn.raiseTypeError("DataLoader must be constructed with a function which accepts list('key) and returns Future.t(list('value)), but the function did not return a Future of a list of the same length as the list of keys.\n\nKeys:\n" + (keys.toString() + ("\n\nValues:\n" + $$Array.of_list(values).toString())));
                      } else {
                        throw exn;
                      }
                    }
                  }));
    } else {
      return /* () */0;
    }
  };
  var load = function (key) {
    try {
      return Hashtbl.find(cache, key);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        var future = Future.make((function (resolve) {
                Belt_MutableQueue.add(queue, /* record */[
                      /* key */key,
                      /* resolve */resolve
                    ]);
                var match = Belt_MutableQueue.size(queue);
                if (match !== 1) {
                  return /* () */0;
                } else {
                  var fn = run;
                  resolvedPromise.then((function (param) {
                          return Promise.resolve((process.nextTick(fn), /* () */0));
                        }));
                  return /* () */0;
                }
              }));
        Hashtbl.add(cache, key, future);
        return future;
      } else {
        throw exn;
      }
    }
  };
  var loadMany = function (keys) {
    return all(List.map(load, keys));
  };
  var prime = function (key, value) {
    return Hashtbl.add(cache, key, Future.value(value));
  };
  var clear = function (key) {
    return Hashtbl.remove(cache, key);
  };
  var clearCache = function (param) {
    return Hashtbl.clear(cache);
  };
  return /* record */[
          /* load */load,
          /* loadMany */loadMany,
          /* run */run,
          /* clearCache */clearCache,
          /* prime */prime,
          /* clear */clear
        ];
}

exports.make = make;
/* No side effect */
